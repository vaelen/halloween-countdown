name: Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -n1 | sed 's/version = "\(.*\)"/\1/')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${VERSION}"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build Linux executable
      run: cargo build --release
    
    - name: Package Linux binary
      run: |
        mkdir -p dist
        cp target/release/halloween-countdown dist/halloween-countdown-linux-x86_64
        chmod +x dist/halloween-countdown-linux-x86_64
        cd dist && tar czf halloween-countdown-linux-x86_64.tar.gz halloween-countdown-linux-x86_64
    
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/halloween-countdown-linux-x86_64.tar.gz
        asset_name: halloween-countdown-linux-x86_64.tar.gz
        asset_content_type: application/gzip

  build-windows:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        target: x86_64-pc-windows-gnu
    
    - name: Install MinGW
      run: sudo apt-get update && sudo apt-get install -y mingw-w64
    
    - name: Build Windows executable
      run: cargo build --release --target x86_64-pc-windows-gnu
    
    - name: Package Windows binary
      run: |
        mkdir -p dist
        cp target/x86_64-pc-windows-gnu/release/halloween-countdown.exe dist/
        cd dist && zip halloween-countdown-windows-x86_64.zip halloween-countdown.exe
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/halloween-countdown-windows-x86_64.zip
        asset_name: halloween-countdown-windows-x86_64.zip
        asset_content_type: application/zip

  update-version:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Calculate next version
      id: next_version
      run: |
        # Parse the current version and increment patch number
        CURRENT_VERSION="${{ needs.create-release.outputs.version }}"
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        NEXT_PATCH=$((patch + 1))
        NEXT_VERSION="${major}.${minor}.${NEXT_PATCH}"
        echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        echo "Next version will be: ${NEXT_VERSION}"
    
    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = ".*"/version = "${{ steps.next_version.outputs.next_version }}"/' Cargo.toml
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml
        git commit -m "Bump version to ${{ steps.next_version.outputs.next_version }} [skip ci]"
        git push