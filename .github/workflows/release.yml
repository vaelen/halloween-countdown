name: Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | head -n1 | sed 's/version = "\(.*\)"/\1/')
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${VERSION}"
    
    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: 'v${{ steps.get_version.outputs.version }}',
            name: 'Release v${{ steps.get_version.outputs.version }}',
            draft: false,
            prerelease: false
          });
          return release.id;

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build Linux executable
      run: cargo build --release
    
    - name: Package Linux binary
      run: |
        mkdir -p dist
        cp target/release/halloween-countdown dist/halloween-countdown-linux-x86_64
        chmod +x dist/halloween-countdown-linux-x86_64
        cd dist && tar czf halloween-countdown-linux-x86_64.tar.gz halloween-countdown-linux-x86_64
    
    - name: Upload Linux Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: 'halloween-countdown-linux-x86_64.tar.gz',
            data: fs.readFileSync('./dist/halloween-countdown-linux-x86_64.tar.gz')
          });

  build-windows:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu
    
    - name: Install MinGW
      run: sudo apt-get update && sudo apt-get install -y mingw-w64
    
    - name: Build Windows executable
      run: cargo build --release --target x86_64-pc-windows-gnu
    
    - name: Package Windows binary
      run: |
        mkdir -p dist
        cp target/x86_64-pc-windows-gnu/release/halloween-countdown.exe dist/
        cd dist && zip halloween-countdown-windows-x86_64.zip halloween-countdown.exe
    
    - name: Upload Windows Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: 'halloween-countdown-windows-x86_64.zip',
            data: fs.readFileSync('./dist/halloween-countdown-windows-x86_64.zip')
          });

  build-macos:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build macOS executable
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Package macOS binary
      run: |
        mkdir -p dist
        if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
          ARCH="intel"
        else
          ARCH="apple-silicon"
        fi
        cp target/${{ matrix.target }}/release/halloween-countdown dist/halloween-countdown-macos-${ARCH}
        chmod +x dist/halloween-countdown-macos-${ARCH}
        cd dist && tar czf halloween-countdown-macos-${ARCH}.tar.gz halloween-countdown-macos-${ARCH}
    
    - name: Upload macOS Release Asset
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const arch = '${{ matrix.target }}' === 'x86_64-apple-darwin' ? 'intel' : 'apple-silicon';
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: `halloween-countdown-macos-${arch}.tar.gz`,
            data: fs.readFileSync(`./dist/halloween-countdown-macos-${arch}.tar.gz`)
          });

  update-version:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Calculate next version
      id: next_version
      run: |
        # Parse the current version and increment patch number
        CURRENT_VERSION="${{ needs.create-release.outputs.version }}"
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        NEXT_PATCH=$((patch + 1))
        NEXT_VERSION="${major}.${minor}.${NEXT_PATCH}"
        echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        echo "Next version will be: ${NEXT_VERSION}"
    
    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = ".*"/version = "${{ steps.next_version.outputs.next_version }}"/' Cargo.toml
    
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml
        git commit -m "Bump version to ${{ steps.next_version.outputs.next_version }} [skip ci]"
        git push